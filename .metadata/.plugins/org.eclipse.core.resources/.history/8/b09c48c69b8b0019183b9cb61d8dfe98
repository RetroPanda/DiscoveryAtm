package com.discovery.bank.service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.discovery.bank.dto.AccountType;
import com.discovery.bank.dto.ClientAccount;
import com.discovery.bank.dto.Currency;
import com.discovery.bank.model.ClientAccountModel;
import com.discovery.bank.repo.AccountRepository;
import com.discovery.bank.repo.AccountTypeRepository;
import com.discovery.bank.repo.CurrencyRepository;

@Service
public class AtmService {
	@Autowired
	AccountRepository accRepository;
	
	@Autowired
	CurrencyRepository currencyRepository;
	
	@Autowired
	AccountTypeRepository accTypeRepository;
	
	public List<ClientAccount> getAllAccounts() {
		List<ClientAccount> accounts = new ArrayList<ClientAccount>();
		accRepository.findAll().forEach((account) -> accounts.add(account));	
	     return accounts;  
	}

	public List<ClientAccount> getCurrencyAccountsByClientId(int id) {
		
		List<ClientAccount> accounts = new ArrayList<ClientAccount>();
		
		//repository.findAllClientAccountsByCurrencyCode("ZAR").forEach((account) -> accounts.add(account));
	
		accRepository.findByClientId(id).forEach((account) -> accounts.add(account));
		
		Currency curr = currencyRepository.findById(account.getCurrencyCode()).get();
		
		accounts.sort(new Comparator<ClientAccount>() {
            @Override
            public int compare(ClientAccount account1, ClientAccount account2) {
            	return account1.getDisplayBalance().compareTo(account2.getDisplayBalance());
             }
        });
		return accounts;
	}
	
	public List<ClientAccountModel> getTransactionalAccountsByClientId(int id) {
		
		List<ClientAccount> accounts = new ArrayList<ClientAccount>();
		List<ClientAccountModel> accountsToReturn = new ArrayList<ClientAccountModel>();
		
		accRepository.findByClientId(id).forEach((account) -> accounts.add(account));
		
		for(ClientAccount account : accounts) {
			ClientAccountModel clientAccountModel = new ClientAccountModel();
			AccountType accType = accTypeRepository.findById(account.getCurrencyCode()).get();
			clientAccountModel.setAccountNumber(account.getClientAccountNumber());
			clientAccountModel.setAccountBalance(account.getDisplayBalance().doubleValue());
			clientAccountModel.setAccountType(accType.getDesciption());
			accountsToReturn.add(clientAccountModel);
		}
		System.out.println();
		accounts.sort(new Comparator<ClientAccount>() {
            @Override
            public int compare(ClientAccount account1, ClientAccount account2) {
            	return account1.getDisplayBalance().compareTo(account2.getDisplayBalance());
             }
        });
		return accounts;
	}

}
